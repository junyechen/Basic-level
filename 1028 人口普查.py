#某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。

#这里确保每个输入的日期都是合法的，但不一定是合理的――假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。

#输入格式：

#输入在第一行给出正整数 N，取值在(0,10
#?5
#?? ]；随后 N 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 yyyy/mm/dd（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。

#输出格式：

#在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。

#输入样例：

#5
#John 2001/05/12
#Tom 1814/09/06
#Ann 2121/01/30
#James 1814/09/05
#Steve 1967/11/20
#输出样例：

#3 Tom John

##########################################################################
#这种年月日的日期形式，可以直接进行字符串大小比较，而不用转换成日期格式
#注意可以存在所有数据都是年龄不合理的
#python超时无法解决
    #试验了网上用C++写的代码，前几个测试均为2ms，最后一个为125ms
    #而python前几个测试就是20+ms，因此必定超时
##########################################################################

#import datetime

#N=int(input())
#data=[]
#today=datetime.datetime(year=2014,month=9,day=6)
#oldday=datetime.datetime(year=1814,month=9,day=6)
#young=[0,0,datetime.timedelta(days=201*365)]
#old=[0,0,datetime.timedelta(days=-1)]
#for i in range(N):
#    line=input().split()
#    line.append(datetime.datetime.strptime(line[1],"%Y/%m/%d"))
#    if line[2]>today or line[2]<oldday:
#        pass
#    else:
#        data.append(line)
#        delta=today-data[-1][2]
#        if delta<young[2]:
#            young=data[-1]
#            young[2]=delta
#        if delta>old[2]:
#            old=data[-1]
#            old[2]=delta
#print(len(data),old[0],young[0])

N=int(input())
data=[]
today="2014/09/06"
oldday="1814/09/06"
young=[0,"1814/09/05"]
old=[0,"2014/09/07"]
for i in range(N):
    line=input().split()
    if line[1]>today or line[1]<oldday:
        pass
    else:
        data.append(line)
        if line[1]>young[1]:
            young=line
        if line[1]<old[1]:
            old=line
if len(data)==0:
    print(0)
else:
    print(len(data),old[0],young[0])